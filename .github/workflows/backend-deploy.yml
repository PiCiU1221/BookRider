name: Deploy Backend to EC2

on:
  pull_request:
    branches:
      - dev
    types:
      - closed
    paths:
      - 'backend/**'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Create .env file
        run: |
          cd backend
          echo "DB_URL=${{ secrets.DB_URL }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "OPENROUTESERVICE_API_KEY=${{ secrets.OPENROUTESERVICE_API_KEY }}" >> .env
          echo "JWT_SERVICE_KEY=${{ secrets.JWT_SERVICE_KEY }}" >> .env
          echo "JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}" >> .env
  
      - name: Build and Test
        run: |
          cd backend
          mvn clean verify -Duser.timezone=Europe/Warsaw

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up SSH and Deploy to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST << 'EOF'
            cd ~/BookRider/backend

            git fetch origin
            git reset --hard origin/dev
            git pull origin dev

            docker stop backend-container || true
            docker rm backend-container || true
            docker rmi backend-image || true

            docker system prune -af --volumes
            
            docker build -t backend-image .
            docker run -d -p 8080:8080 --env-file .env --name backend-container backend-image
          EOF
